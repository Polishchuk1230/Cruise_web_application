package ua.com.cruises.repository;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ua.com.cruises.model.Pojo;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Optional;

public class DaoMethods {
    private DaoMethods() {}

    private static Logger logger = LogManager.getLogger(DaoMethods.class);

    /*
     * The method designed to minimize the boiler code of (1)getting Connection, (2)creating Statement and
     * (3)using try/catch in dao-classes
     * */
    static Optional<Object> provideStatementForFunction(FunctionThrowsSQLExc<Statement, Optional<Object>> function) {
        try (Connection connection = ConnectionPool.getConnection();
             Statement statement = connection.createStatement())
        {
            return function.apply(statement);
        }
        catch (SQLException e) {
            logger.debug(e);
            return Optional.empty();
        }
    }

    /*
     * Functional interface designed to use Statement object in lambdas without requirement of catching SQLException
     * during their creation.
     * */
    @FunctionalInterface
    interface FunctionThrowsSQLExc<T, R> {
        R apply(T t) throws SQLException;
    }

    /*
    * Common method for updating one and only one row in DB
    * */
    static Optional<Object> commonUpdateRowMethod(String query, Statement statement) throws SQLException {
        int count = statement.executeUpdate(query);
        if (count != 0) {
            return Optional.of(true);
        }
        return Optional.of(false);
    }

    /*
    * (Reduce commonly repeated code)
    * implements logic of (1)inserting a new POJO object to database, (2)receiving of a new (generated by DB) id for
    * the object and (3)sets that id to the POJO object
    * */
    static Optional<Object> commonInsertNewRow(Pojo obj, String query, Statement statement) throws SQLException {
        int count = statement.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);
        ResultSet resultSet = statement.getGeneratedKeys();

        if (count == 1) {
            //Sets a new generated id to a cadre (if it hasn't)
            if (obj.getId() == 0 && resultSet.next()) {
                obj.setId(resultSet.getInt(1));
            }

            //Returns optional of true only if one row was written to DB
            return Optional.of(true);
        }

        return Optional.of(false);
    }

    /*
     * This is a support method, designed to check if a POJO object with particular id already exists in a provided List.
     * If it does, returns that object, if it does not, returns null.
     * (Now used only in OrderDao#commonMassSelectMethod, BoatDao#commonMassSelectMethod and
     * CruiseDao#commonMassSelectMethod)
     * */
    static Pojo findInList(int objId, List<? extends Pojo> checkedList) {
        for (Pojo obj : checkedList) {
            if (obj.getId() == objId) {
                return obj;
            }
        }
        return null;
    }

}
